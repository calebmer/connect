import {
  APIError,
  APIErrorCode,
  AccessToken,
  AccountID,
} from "@connect/api-client";
import {JWT_SECRET} from "./RunConfig";
import jwt from "jsonwebtoken";

/**
 * The data carried around in an access token.
 */
export type AccessTokenData = {
  /**
   * The identifier of the account that is authorized to interact with our API.
   */
  readonly id: AccountID;
};

/**
 * Responsible for generating and verifying access tokens for our API.
 */
export const AccessTokenGenerator = {
  /**
   * Generates an access token using the provided data.
   *
   * **DANGER DANGER DANGER:** All access tokens generated by this method are
   * trusted! You must must _must_ first verify that you are only ever
   * generating an access token for the true owner of an account.
   *
   * If an attacker gets their hands on an access token they have full access to
   * the account until the access token expires.
   */
  async generate(data: AccessTokenData): Promise<AccessToken> {
    const accessToken = await new Promise<string>((resolve, reject) => {
      jwt.sign(data, JWT_SECRET, {expiresIn: "1h"}, (error, accessToken) => {
        if (error) reject(error);
        else resolve(accessToken);
      });
    });
    return accessToken as AccessToken;
  },

  /**
   * Verifies that a string is, indeed, an access token **and** that an access
   * token was generated by our API and no one else.
   *
   * If we fail to verify the access token then we will throw an `APIError` with
   * an unauthorized error code.
   */
  async verify(accessToken: string): Promise<AccessTokenData> {
    const accessTokenData = await new Promise<any>((resolve, reject) => {
      jwt.verify(accessToken, JWT_SECRET, (error, accessTokenData) => {
        if (error) {
          // We want to throw an API error instead of a JWT error. So convert
          // to the proper error here.
          if (error instanceof jwt.TokenExpiredError) {
            reject(new APIError(APIErrorCode.ACCESS_TOKEN_EXPIRED));
          } else {
            reject(new APIError(APIErrorCode.UNAUTHORIZED));
          }
        } else {
          resolve(accessTokenData);
        }
      });
    });
    return accessTokenData;
  },
};
